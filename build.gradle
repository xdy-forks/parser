import java.text.SimpleDateFormat

buildscript {
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.26.1"
        classpath 'antlr:antlr:2.7.7'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

// Access Git info from build script
plugins {
    id "org.ajoberstar.grgit" version "4.0.1"
    id 'antlr'
    id 'nebula.lint' version '16.0.2'
    id "com.github.ben-manes.versions" version '0.27.0'
}


apply plugin: 'java-library'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'maven'
apply plugin: 'nebula.lint'
gradleLint.rules = ['all-dependency','all-nebula-renames','archaic-wrapper','duplicate-dependency-class']



sourceCompatibility = 10
targetCompatibility = 10


// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url = 'http://maptool.craigs-stuff.net/repo/' }
}



dependencies {
    compile 'antlr:antlr:2.7.7'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    antlr 'antlr:antlr:2.7.7'
    compile 'org.ajoberstar.grgit:grgit-gradle:4.0.1'
}

// Custom properties
ext {
    // Get tag and commit info from Git to use for version numbering
    def repo = org.ajoberstar.grgit.Grgit.open(currentDir: file('.'))
    def head = repo.head()
    def tags = repo.tag.list().find {
        it.commit == head
    }

    if (tags) {
        tagVersion = tags.getName()
        project.version = tagVersion
    }

    revision = head.abbreviatedId
    revisionFull = head.id

//    println 'Configuring for ' + project.name + " " + tagVersion + " by " + vendor
}
group = "net.rptools.parser"

spotless {
    java {
        target project.fileTree(project.rootDir) {
            include 'src/**/*.java'
            exclude '**/generated-src/'
        }
        licenseHeaderFile 'spotless.license.java'
        // Now using the Google Java style guide
        //eclipse().configFile('build-resources/eclipse.prefs.formatter.xml')
        googleJavaFormat()
        // If you get exceptions thrown by spotlessApply, this might
        // help.  Enable it here if the problem is with a Java file, and
        // below if it is not.  Don't leave it enabled, as nothing will
        // actually be updated if you do.
        // https://github.com/diffplug/spotless/blob/master/PADDEDCELL.md
        //paddedCell()
    }

    format 'misc', {
        target '**/*.gradle', '**/.gitignore'

        // spotless has built-in rules for most basic formatting tasks
        trimTrailingWhitespace()
        // or spaces. Takes an integer argument if you don't like 4
        indentWithSpaces(4)
        //paddedCell()
    }
}

configurations {
    deployerJars
}

install {
    repositories.mavenInstaller {
        pom.version = project.version;
        pom.artifactId = 'parser';
        pom.groupId = 'net.rptools.parser';
    }
}


uploadArchives {
    repositories.mavenDeployer {
        pom.version = project.version;
        pom.artifactId = 'parser';
        pom.groupId = 'net.rptools.parser';
        configuration = configurations.deployerJars;
        repository url: 'file://' + projectDir + '/../maven-repo'
    }
}


jar {
    manifest {
        attributes 'Implementation-Title': 'parser',
                'Implementation-Version': project.version
    }
}

